use std::collections::hash_map::HashMap;

#[derive(Debug, PartialEq,Clone)]
pub enum Node{
    Integer(i64),
    Boolean(bool),
    Ident(String),
    Add(Box<Node>,Box<Node>),
    Sub(Box<Node>,Box<Node>),
    Mul(Box<Node>,Box<Node>),
    Div(Box<Node>,Box<Node>),
    Mod(Box<Node>,Box<Node>),
    Neg(Box<Node>),
    Eq(Box<Node>,Box<Node>),
    Ne(Box<Node>,Box<Node>),
    Lt(Box<Node>,Box<Node>),
    Gt(Box<Node>,Box<Node>),
    Le(Box<Node>,Box<Node>),
    Ge(Box<Node>,Box<Node>),
    And(Box<Node>,Box<Node>),
    Or(Box<Node>,Box<Node>),
    Not(Box<Node>),
    Conditional(Box<Node>,Box<Node>,Box<Node>),
    Assign(Box<Node>,Box<Node>),
    TypeDef(String,HashMap<String,usize>),
    LambdaDef(Vec<Box<Node>>,Vec<(Vec<Box<Node>>,Box<Node>)>,Box<Node>),
    FuncBind(Box<Node>,Box<Node>),
    Call(Box<Node>,Vec<Box<Node>>),
    PatternDef(Vec<Box<Node>>),
    StructMatch(Box<Node>,Vec<Box<Node>>),
    ListMatch(Box<Node>,Vec<Box<Node>>),
    ArrayInit(Vec<Box<Node>>),
    ElementAccess(Box<Node>,Box<Node>),
    MemberAccess(Box<Node>,Box<Node>),
    BlockStmt(u64,Vec<Box<Node>>),
    ExprStmt(u64,Box<Node>),
    IfStmt(u64,Box<Node>,Box<Node>,Box<Node>),
    LoopStmt(u64,Box<Node>,Box<Node>),
    ReturnStmt(u64,Box<Node>)
}
